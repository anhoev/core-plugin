{
  "_id": "5c3c8760bf8bf735a35ff29d",
  "__v": 0,
  "alwaysLoad": true,
  "class": null,
  "extensions": [],
  "fields": [
    {
      "_id": "5c3c8805bf8bf735a35ff29f",
      "schemaType": "mixed",
      "key": "items",
      "default": null,
      "type": "tree",
      "flex": null,
      "fields": [
        {
          "schemaType": "object",
          "type": "object",
          "key": "view",
          "fields": [
            {
              "schemaType": "object",
              "type": "GObjectDelegate",
              "formatItems": {
                "_code_": "module.exports = function (item) {\n  return [\n    {\n      text: item.slot,\n      showChip: false\n    },\n    {\n      text: item.isScopedSlot ? 'scopedSlot' : null,\n      align: 'right'\n    }\n  ]\n}",
                "_code_type_": "commonJs"
              },
              "fields": [
                {
                  "schemaType": "string",
                  "key": "slot",
                  "type": "input@select",
                  "notOnlyValueInOptions": true,
                  "optionsType": "code",
                  "options": {
                    "_code_": "module.exports = function({model, rootModel, path}) {\n  try {\n    const _path = _.take(path.split('.'), path.split('.').length - 3).join('.');\n    if (!_.isEmpty(_path)) {\n      const parentNode = _.get(rootModel, _path);\n      if (parentNode) { \n        const component = cms.pluginComponents.find(c => c.name === parentNode.component);\n        const slots = component.slots;\n        if (typeof slots === 'function') { \n          return slots(parentNode.content.props);\n        }\n      }\n    }\n  } catch (e) {\n    console.log(e);\n  }\n  \n  return [];\n}",
                    "_code_type_": "commonJs"
                  },
                  "addable": false
                },
                {
                  "schemaType": "boolean",
                  "key": "isScopedSlot",
                  "type": "input@checkbox",
                  "addable": true
                }
              ],
              "label": "slot",
              "flex": "md12",
              "editOnFocus": true
            },
            {
              "schemaType": "string",
              "key": "component",
              "type": "component-select",
              "optionsType": "code"
            },
            {
              "schemaType": "object",
              "key": "content",
              "type": "object@dynamic",
              "flex": "md12",
              "addable": false,
              "dynamicFieldsType": "code",
              "dynamicFields": {
                "_code_": "//const cms = require('cms');\nmodule.exports = function getDynamicFields({ model }) {\n  const component = cms.pluginComponents.find(c => c.name === model.component);\n  const props = component.props;\n  const events = (component.events || []).map(key => ({key, type: 'editor', addable: true}));\n  model.content.preprocess = component.preprocess;\n  return [{\n    key: 'props',\n    noPanel: true,\n    type: 'object',\n    fields: props\n  },{\n    key: 'events',\n    noPanel: true,\n    type: 'object',\n    fields: events\n  }]\n}",
                "_code_type_": "commonJs"
              },
              "noPanel": true
            },
            {
              "schemaType": "array",
              "key": "binding",
              "type": "tableArray",
              "fields": [
                {
                  "schemaType": "string",
                  "key": "type",
                  "type": "input@select",
                  "optionsType": "onlyValue",
                  "options": [
                    "prop",
                    "emit",
                    "slot"
                  ]
                },
                {
                  "schemaType": "string",
                  "key": "root",
                  "type": "input@select",
                  "optionsType": "code",
                  "options": {
                    "_code_": "module.exports = function getDynamicFields({ rootModel, model, path }) {\n  return rootModel.props.fields.map(f => f.key).concat(rootModel.events);\n}",
                    "_code_type_": "commonJs"
                  },
                  "notOnlyValueInOptions": true
                },
                {
                  "schemaType": "string",
                  "key": "local",
                  "type": "input@select",
                  "optionsType": "code",
                  "options": {
                    "_code_": "//const _ = require('lodash');\nmodule.exports = function getDynamicFields({ model, rootModel, path }) {\n  path = _.take(path.split('.'), 2).join('.');\n  model = _.get(rootModel, path);\n  const component = cms.pluginComponents.find(c => c.name === model.component);\n  const props = component.props;\n  return props.map(p => p.key).concat(component.events);\n}",
                    "_code_type_": "commonJs"
                  },
                  "notOnlyValueInOptions": true
                },
                {
                  "schemaType": "string",
                  "key": "emitObj",
                  "type": "input@select",
                  "isVisible": {
                    "_code_": "module.exports = function ({model}) {\n  return model.type === 'emit';\n}",
                    "_code_type_": "commonJs"
                  },
                  "optionsType": "onlyValue",
                  "notOnlyValueInOptions": true
                }
              ],
              "addable": true,
              "expansion": [
                "emitObj"
              ]
            },
            {
              "schemaType": "array",
              "key": "slotScopeBinding",
              "type": "tableArray",
              "fields": [
                {
                  "schemaType": "string",
                  "key": "type",
                  "type": "input@select",
                  "optionsType": "onlyValue",
                  "options": [
                    "prop",
                    "emit",
                    "slot",
                    "v-model"
                  ]
                },
                {
                  "schemaType": "string",
                  "key": "slotScope",
                  "type": "input@select",
                  "optionsType": "code",
                  "options": {
                    "_code_": "module.exports = function getDynamicFields({ rootModel, model, path }) {\n  return rootModel.props.fields.map(f => f.key).concat(rootModel.events);\n}",
                    "_code_type_": "commonJs"
                  },
                  "notOnlyValueInOptions": true
                },
                {
                  "schemaType": "string",
                  "key": "local",
                  "type": "input@select",
                  "optionsType": "code",
                  "options": {
                    "_code_": "//const _ = require('lodash');\nmodule.exports = function getDynamicFields({ model, rootModel, path }) {\n  path = _.take(path.split('.'), 2).join('.');\n  model = _.get(rootModel, path);\n  const component = cms.pluginComponents.find(c => c.name === model.component);\n  const props = component.props;\n  return props.map(p => p.key).concat(component.events);\n}",
                    "_code_type_": "commonJs"
                  },
                  "notOnlyValueInOptions": true
                }
              ],
              "addable": true
            },
            {
              "schemaType": "mixed",
              "key": "mixin",
              "type": "editor",
              "addable": true,
              "codeType": "vueComponent"
            },
            {
              "schemaType": "object",
              "key": "provide",
              "type": "object",
              "fields": [
                {
                  "schemaType": "string",
                  "key": "domain",
                  "type": "input",
                  "flex": "md12"
                },
                {
                  "schemaType": "array",
                  "key": "binding",
                  "type": "GArrayDelegate",
                  "fields": [
                    {
                      "schemaType": "string",
                      "key": "type",
                      "type": "input@select",
                      "optionsType": "onlyValue",
                      "options": [
                        "v-model",
                        ".sync",
                        "method"
                      ]
                    },
                    {
                      "schemaType": "string",
                      "key": "serviceName",
                      "type": "input"
                    }
                  ],
                  "addable": false,
                  "formatItem": {
                    "_code_": "module.exports = function (item) {\n  return {text: `${item.type}: ${item.serviceName}`}\n}",
                    "_code_type_": "commonJs"
                  },
                  "editOnFocus": true
                }
              ],
              "addable": true
            },
            {
              "schemaType": "array",
              "key": "inject",
              "type": "GArrayDelegate",
              "fields": [
                {
                  "schemaType": "string",
                  "key": "service",
                  "type": "input",
                  "flex": "md4"
                },
                {
                  "schemaType": "string",
                  "key": "local",
                  "type": "input",
                  "flex": "md4"
                },
                {
                  "schemaType": "string",
                  "key": "type",
                  "type": "input@select",
                  "flex": "md4",
                  "optionsType": "onlyValue",
                  "options": [
                    "default",
                    "v-model",
                    "event",
                    "prop"
                  ]
                }
              ],
              "formatItem": {
                "_code_": "module.exports = function (item) {\n  return {\n    text: `${item.service} -> ${item.local}`,\n  }\n}",
                "_code_type_": "commonJs"
              },
              "editOnFocus": true,
              "addable": true
            }
          ],
          "default": null,
          "mixed": null,
          "dynamicFieldsType": "queryString"
        }
      ],
      "children": "items",
      "getText": {
        "_code_": "module.exports = function getText(item) {\n   let str = ''; \n   if (item.slot) str += item.slot + ':'; \n   return `${str}${item.component}`; \n}",
        "_code_type_": "commonJs"
      },
      "selectNodeAfterClick": true
    },
    {
      "_id": "5c945bc87a578a5d2b27ab2d",
      "schemaType": "string",
      "key": "name",
      "type": "input",
      "flex": "md12"
    },
    {
      "_id": "5c764724dc6711141fb5b88c",
      "schemaType": "string",
      "key": "renderToRoute",
      "type": "input",
      "label": "Render To Route",
      "flex": "md12"
    },
    {
      "_id": "5c74b84321f0cd1602fb441b",
      "schemaType": "boolean",
      "key": "isProduction",
      "type": "input@checkbox",
      "label": "Production",
      "flex": "md6"
    },
    {
      "_id": "5c945c3c7a578a5d2b27ab3e",
      "schemaType": "boolean",
      "key": "renderInAdminPage",
      "type": "input@checkbox",
      "flex": "md6"
    },
    {
      "_id": "5c9b5a417a7499bfa029405d",
      "schemaType": "boolean",
      "key": "renderInIframe",
      "type": "input@checkbox"
    },
    {
      "_id": "5cac081678e22f41dfb9d33f",
      "schemaType": "boolean",
      "key": "registerAsVueComponent",
      "type": "input@checkbox"
    },
    {
      "_id": "5cc6dca9d901a07afc3258cd",
      "schemaType": "mixed",
      "key": "props",
      "type": "object@dynamic",
      "noPanel": true,
      "dynamicFieldsType": "code",
      "dynamicFields": {
        "_code_": "module.exports = function getDynamicFields({ model }) {\n  return [cms.Types.BuildForm.form.find(f => f.key === 'fields')];\n}",
        "_code_type_": "commonJs"
      }
    },
    {
      "_id": "5caf044e9fe2377748da5460",
      "schemaType": "array",
      "key": "events",
      "fields": [
        {
          "schemaType": "string"
        }
      ],
      "type": "input@multiSelect",
      "optionsType": null
    },
    {
      "_id": "5cb30f507c9b10937af22bbf",
      "schemaType": "mixed",
      "key": "mockProps",
      "type": "editor",
      "addable": true
    },
    {
      "_id": "5dd65138e221ef3fff05f8bd",
      "schemaType": "boolean",
      "key": "isolateCss",
      "type": "input@checkbox",
      "addable": true
    }
  ],
  "id": "5c3c8760bf8bf735a35ff29d",
  "name": "ComponentBuilder",
  "tabs": [
    {
      "fields": [
        "isProduction",
        "renderToRoute",
        "name",
        "renderInAdminPage",
        "renderInIframe",
        "registerAsVueComponent",
        "events",
        "mockProps",
        "isolateCss"
      ],
      "_id": "5c74b84321f0cd1602fb441a",
      "name": "Settings"
    },
    {
      "fields": [
        "props"
      ],
      "_id": "5cc6dd3cd901a07afc3258dc",
      "name": "VueProps"
    }
  ],
  "title": "name",
  "type": "Collection"
}
